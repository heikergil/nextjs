name: Prod Deploy
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  
on:
  release:
    types: [published]

jobs:
    test:
        timeout-minutes: 15
        if: github.event.release.target_commitish == 'main'
        name: Test dev
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Use Node.js 
              uses: actions/setup-node@v3
              with:
                  node-version: '18'
                  cache: 'yarn'
                  cache-dependency-path: yarn.lock

            - name: Install playwright
              run: yarn add @playwright/test               

            - name: Install Playwright Browsers
              if: steps.cache-playwright.outputs.cache-hit != 'true'
              run: npx playwright install --with-deps chromium webkit  

            - name: Run Playwright tests
              id: e2e_tests
              env:
                CI: true
                TEST_ACCOUNT_EMAIL: ${{ secrets.TEST_ACCOUNT_EMAIL }}
                TEST_ACCOUNT_PASS: ${{ secrets.TEST_ACCOUNT_PASS }}
                EMPTY_TEST_ACCOUNT_EMAIL: ${{ secrets.EMPTY_TEST_ACCOUNT_EMAIL }}
                EMPTY_TEST_ACCOUNT_PASS: ${{ secrets.EMPTY_TEST_ACCOUNT_PASS }} 
                BASE_URL: 'https://nextjs-git-dev-gilheyker.vercel.app'
              run: yarn playwright test
            - uses: actions/upload-artifact@v2
              if: always()
              with:
                name: playwright-report
                path: playwright-report/
                retention-days: 3

            - name: E2E tests slack notification
              if: always()
              uses: slackapi/slack-github-action@v1.22.0
              with:
                  channel-id: 'headless-ci-notifications'
                  payload: |
                      {
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "<${{ github.event.release.html_url }} | Release: ${{ github.event.release.tag_name }} - ${{ github.event.release.name }}> ${{ steps.e2e_tests.outcome }} ${{ fromJSON('{"failure": "  :test_tube::fail:", "success": ":test_tube::white_check_mark:"}')[ steps.e2e_tests.outcome ] }}"
                            }
                          }
                        ]
                      }
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    deploy:
        name: deploy to prod
        needs: [test]
        timeout-minutes: 15
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3

            - name: Cache node_modules
              uses: actions/cache@v3
              id: cache-node-modules
              with:
                  path: |
                      node_modules
                  key: modules-${{ hashFiles('package-lock.json') }}

            - name: Install Vercel CLI
              run: npm install --global vercel@latest              

            - name: Pull Prod Enviroment
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Prod
              id: deploy_prod
              run: vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}                     

            - name: Theme publish slack notification
              id: slack
              uses: slackapi/slack-github-action@v1.22.0
              with:
                  channel-id: 'test-notifications'
                  payload: |
                      {
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "<${{ github.event.release.html_url }} | Release: ${{ github.event.release.tag_name }} - ${{ github.event.release.name }}> ${{ fromJSON('{"failure": "  :test_tube::fail:", "success": ":test_tube::white_check_mark:"}')[ steps.deploy_prod.outcome ] }}"
                            }
                          }
                        ]
                      }
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}                             
 