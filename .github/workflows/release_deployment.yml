name: Prod Deploy
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  
on:
  release:
    types: [published]

jobs:
    build:
        if: github.event.release.target_commitish == 'release-deployments'
        timeout-minutes: 30 # nothing good happens after 30 minutes
        name: Vercel Prod Build
        runs-on: ubuntu-latest
        outputs:
          preview_url: ${{ steps.deploy-vercel-staging.outputs.preview_url }}
        steps:
            - name: Dump GitHub context2
              run: |
                echo ${{ github.event.release.target_commitish }}            

            - uses: actions/checkout@v3
            - name: Use Node.js 
              uses: actions/setup-node@v3
              with:
                  node-version: '18'
                  cache: 'yarn'
                  cache-dependency-path: yarn.lock

            - name: Get node version
              id: node
              run: |
               echo "version=$(node -v)" >> $GITHUB_OUTPUT

            - name: Get node_modules cache
              uses: actions/cache@v3
              id: node_modules
              with:
                path: |
                    **/node_modules
                key: node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}

            - name: Install pakages
              run: yarn install --frozen-lockfile --prefer-offline

            - name: Install Vercel CLI
              run: npm install --global vercel@latest           

            - name: Deploy Preview
              id: deploy-vercel-staging
              run: echo "preview_url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT


    test:
        name: E2E tests
        needs: build
        timeout-minutes: 30
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3

            - name: Get node_modules cache
              uses: actions/cache@v3
              id: node_modules
              with:
                path: |
                    **/node_modules
                key: node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}

            - name: Cache Playwright
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/ms-playwright
                  key: playwright-${{ hashFiles('yarn.lock') }}

            - name: Install Playwright Browsers
              if: steps.cache-playwright.outputs.cache-hit != 'true'
              run: npx playwright install --with-deps chromium webkit  
                              
            - name: Run Playwright tests
              id: e2e_tests
              env:
                CI: true
                TEST_ACCOUNT_EMAIL: ${{ secrets.TEST_ACCOUNT_EMAIL }}
                TEST_ACCOUNT_PASS: ${{ secrets.TEST_ACCOUNT_PASS }}
                EMPTY_TEST_ACCOUNT_EMAIL: ${{ secrets.EMPTY_TEST_ACCOUNT_EMAIL }}
                EMPTY_TEST_ACCOUNT_PASS: ${{ secrets.EMPTY_TEST_ACCOUNT_PASS }} 
                BASE_URL: ${{ needs.build.outputs.preview_url }}
              run: yarn playwright test
            - uses: actions/upload-artifact@v2
              if: always()
              with:
                name: playwright-report
                path: playwright-report/
                retention-days: 3


    deploy:
        name: publish shopify theme
        needs: [build, test]
        timeout-minutes: 30
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3

            - name: Cache node_modules
              uses: actions/cache@v3
              id: cache-node-modules
              with:
                  path: |
                      node_modules
                  key: modules-${{ hashFiles('package-lock.json') }}

            - name: Pull Prod Enviroment
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Prod
              run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Prod
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}                     
 